// KQL samples - Extension lifecycle events 

// Use renames in the project operator if you don't need to filter on the columns extracted from customDimensions
// move columns up to the extend operator and add a tostring function call if you need to filter or summarize on it


// ENVIRONMENT/SERVER-SIDE OPERATIONS
// lifecycle is compile-publish-unpublish

// extension compiled successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0020' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionCompilationDependencyList = customDimensions.extensionCompilationDependencyList
, extensionCompilationResult = customDimensions.extensionCompilationResult
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, result = customDimensions.result
, message


// Extension failed to compile (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0021' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionCompilationDependencyList = customDimensions.extensionCompilationDependencyList
, extensionCompilationResult = customDimensions.extensionCompilationResult
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension published successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0014' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionIsRad = customDimensions.extensionIsRad
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension failed to publish (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0015' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionIsRad = customDimensions.extensionIsRad
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension unpublished successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0018' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension failed to un-publish (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0019' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// TENANT OPERATIONS
// lifecycle is synchronize-install-update-uninstall

// Extension synchronized successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0012' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, extensionSynchronizationMode = customDimensions.extensionSynchronizationMode
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension synchronized failed (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0013' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, extensionSynchronizationMode = customDimensions.extensionSynchronizationMode
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension is already synchronized (raw data)
// This signal was added in 21.1
traces
| where timestamp > ago(5d) 
| where customDimensions.eventId == 'LC0056'
| project timestamp
, eventId = customDimensions.eventId
, aadTenantId = customDimensions.aadTenantId 
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, extensionSynchronizationMode = customDimensions.extensionSynchronizationMode
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension installed successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0010' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension failed to install (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0011' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension updated successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0022' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublisher = customDimensions.extensionPublisher
, extensionVersionFrom = customDimensions.extensionVersionFrom
, extensionCulture = customDimensions.extensionCulture
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension failed to update (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0023' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublisher = customDimensions.extensionPublisher
, extensionCulture = customDimensions.extensionCulture
, extensionVersionFrom = customDimensions.extensionVersionFrom
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Extension un-installed successfully (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0016' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, doNotSaveData = customDimensions.doNotSaveData
, extensionPublisher = customDimensions.extensionPublisher
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, message


// Extension failed to un-install (raw data)
traces
| where timestamp > ago(60d) // adjust as needed
| where customDimensions.eventId == 'LC0017' 
| extend aadTenantId = tostring( customDimensions.aadTenantId )
| project 
  timestamp
, eventId = customDimensions.eventId
, aadTenantId
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, extensionPublisher = customDimensions.extensionPublisher
, extensionPublishedAs = customDimensions.extensionPublishedAs
, extensionScope = customDimensions.extensionScope
, extensionVersion = customDimensions.extensionVersion
, serverExecutionTime = customDimensions.serverExecutionTime
, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan 
, totalTime = customDimensions.totalTime
, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan 
, sqlExecutes = customDimensions.sqlExecutes
, sqlRowsRead = customDimensions.sqlRowsRead
, result = customDimensions.result
, failureReason = customDimensions.failureReason
, message


// Dependent extension installed successfully (raw data)
// This signal was added in 18.1
traces
| where timestamp > ago(5d)
| where customDimensions.eventId == 'LC0026'
| project timestamp
, aadTenantId = customDimensions.aadTenantId
, componentVersion = customDimensions.componentVersion
, component = customDimensions.component
, environmentType = customDimensions.environmentType
, extensionPublisher = customDimensions.extensionPublisher
, extensionVersion = customDimensions.extensionVersion
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, eventId = customDimensions.eventId
, parentExtensionId = customDimensions.parentExtensionId
, message


// Dependent extension failed to install (raw data)
// This signal was added in 18.1
traces
| where timestamp > ago(5d)
| where customDimensions.eventId == 'LC0027'
| project timestamp
, aadTenantId = customDimensions.aadTenantId
, componentVersion = customDimensions.componentVersion
, component = customDimensions.component
, doNotSaveData = customDimensions.doNotSaveData
, environmentType = customDimensions.environmentType
, extensionPublisher = customDimensions.extensionPublisher
, extensionVersion = customDimensions.extensionVersion
, extensionName = customDimensions.extensionName
, extensionId = customDimensions.extensionId
, eventId = customDimensions.eventId
, parentExtensionId = customDimensions.parentExtensionId
, message







//
// Environment app hotfixes via FAME
// 
// EnvironmentAppHotfixScheduled = "LC0155";
// EnvironmentAppHotfixSchedulingFailed = "LC0156";
// EnvironmentAppHotfixCanceled = "LC0157";
// EnvironmentAppHotfixStarted = "LC0158";
// EnvironmentAppHotfixSucceeded = "LC0159";
// EnvironmentAppHotfixFailed = "LC0160";
//


// Environment app hotfix scheduled by FAME
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0155'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, runAfterDateUtc = customDimensions.runAfterDateUtc
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow

// Environment app hotfix scheduling by FAME failed
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0156'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow

// Environment app hotfix canceled by FAME
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0157'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, runAfterDateUtc = customDimensions.runAfterDateUtc
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow

// Environment app hotfix started by FAME
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0158'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, runAfterDateUtc = customDimensions.runAfterDateUtc
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow

// Environment app hotfix applied successfully by FAME
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0159'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, runAfterDateUtc = customDimensions.runAfterDateUtc
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, totalTime = customDimensions.totalTime

// Environment app hotfix by FAME failed
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0160'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, runAfterDateUtc = customDimensions.runAfterDateUtc
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, totalTime = customDimensions.totalTime




//
// Environment app install events (partially duplicates NST signals, but this brings more info on orchestration)
//
// TAC only
// EnvironmentAppInstallScheduled = "LC0161";
// EnvironmentAppInstallSchedulingFailed = "LC0162";
// 
// All install events except when installing from VSCODE
// EnvironmentAppInstallStarted = "LC0163";
// EnvironmentAppInstallSucceeded = "LC0164";
// EnvironmentAppInstallFailed = "LC0165";
//
// TAC only - Some app lifecycle event needed this
// EnvironmentAppDependencyInstallRequired = "LC0166";
//


// Environment app installation scheduled (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0161'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc



// Environment app installation scheduling failed (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0162'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime


// Environment app installation started (not emitted when installing from vscode)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0163'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc


// Environment app installation succeeded (not emitted when installing from vscode)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0164'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime


// Environment app installation failed (not emitted when installing from vscode)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0165'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime



// Environment app installation/update requires automatically installing a new dependency app (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0166'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, dependencyExtensionId = customDimensions.dependencyExtensionId
, dependencyExtensionName = customDimensions.dependencyExtensionName
, dependencyExtensionPublisher = customDimensions.dependencyExtensionPublisher
, dependencyExtensionScope = customDimensions.dependencyExtensionScope
, dependencyExtensionDestinationVersion = customDimensions.dependencyExtensionDestinationVersion
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc






//
// Environment app update (this partially duplicates NST signals, but we have more info on orchestration, canceling is not supported yet)
//
// TAC only
// EnvironmentAppUpdateScheduled = "LC0167";
// EnvironmentAppUpdateSchedulingFailed = "LC0168";
//
// All operations except when installing from VSCODE
// EnvironmentAppUpdateStarted = "LC0169";
// EnvironmentAppUpdateSucceeded = "LC0170";
// EnvironmentAppUpdateFailed = "LC0171";
// 
// TAC only - Some app lifecycle event needed this
// EnvironmentAppDependencyUpdateRequired = "LC0172";
//


// Environment app update scheduled (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0167'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc


// Environment app update scheduling failed (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0168'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime


// Environment app update started (not emitted if extension was updated from VSCODE)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0169'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc


// Environment app update succeeded
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0170'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime




// Environment app update failed
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0171'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime


// Environment app install/update requires automatically updating existing dependency app (TAC only)
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0172'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependencyUpdate = customDimensions.allowDependencyUpdate
, allowPreviewVersion = customDimensions.allowPreviewVersion
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, dependencyExtensionId = customDimensions.dependencyExtensionId
, dependencyExtensionName = customDimensions.dependencyExtensionName
, dependencyExtensionPublisher = customDimensions.dependencyExtensionPublisher
, dependencyExtensionScope = customDimensions.dependencyExtensionScope
, dependencyExtensionDestinationVersion = customDimensions.dependencyExtensionDestinationVersion
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc




//
// Environment app uninstall (only scheduling events available as the server telemetry has the rest of uninstall signals
//
// TAC only
// EnvironmentAppUninstallScheduled = "LC0173";
// EnvironmentAppUninstallSchedulingFailed = "LC0174";
//


// Environment app uninstall scheduled
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0173'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependentsUninstall = customDimensions.allowDependentsUninstall
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, deleteData = customDimensions.deleteData
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc


// Environment app uninstall scheduling failed
traces
| where timestamp > ago(30d) // adjust as needed
| where customDimensions.eventId == 'LC0174'
| project timestamp
, message
, aadTenantId = customDimensions.aadTenantId
, allowDependentsUninstall = customDimensions.allowDependentsUninstall
, applicationFamily = customDimensions.applicationFamily
, countryCode = customDimensions.countryCode
, deleteData = customDimensions.deleteData
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, extensionId = customDimensions.extensionId
, extensionName = customDimensions.extensionName
, extensionPublisher = customDimensions.extensionPublisher
, extensionScope = customDimensions.extensionScope
, extensionSourceVersion = customDimensions.extensionSourceVersion
, extensionDestinationVersion = customDimensions.extensionDestinationVersion
, failureReason = customDimensions.failureReason
, useEnvironmentUpdateWindow = customDimensions.useEnvironmentUpdateWindow
, runAfterDateUtc = customDimensions.runAfterDateUtc
, totalTime = customDimensions.totalTime


















//
// Event blocks - will be removed after GA
//

PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("extensionId")]
[PartnerTelemetryKey("extensionName")]
[PartnerTelemetryKey("extensionPublisher")]
[PartnerTelemetryKey("extensionScope")]
[PartnerTelemetryKey("extensionSourceVersion")]
[PartnerTelemetryKey("extensionDestinationVersion")]
[PartnerTelemetryKey("useEnvironmentUpdateWindow")]
[PartnerTelemetryKey("runAfterDateUtc")]

extensionId
extensionName
extensionPublisher
extensionScope
extensionSourceVersion
extensionDestinationVersion
useEnvironmentUpdateWindow
runAfterDateUtc


PartnerDiagnosticsBlockEnvironmentInfo 
[PartnerTelemetryKey("aadTenantId")]
[PartnerTelemetryKey("environmentName")]
[PartnerTelemetryKey("environmentType")]
[PartnerTelemetryKey("applicationFamily")]
[PartnerTelemetryKey("countryCode")]

|aadTenantId|[!INCLUDE[aadTenantId](../includes/include-telemetry-dimension-aadtenantid.md)]|
|applicationFamily|[!INCLUDE[applicationFamily](../includes/include-telemetry-dimension-application-family.md)]|
|countryCode|[!INCLUDE[countryCode](../includes/include-telemetry-dimension-country-code.md)]|
|environmentName|[!INCLUDE[environmentName](../includes/include-telemetry-dimension-environment-name.md)]|
|environmentType|[!INCLUDE[environmentType](../includes/include-telemetry-dimension-environment-type.md)]|


PartnerDiagnosticsBlockEnvironmentUpdateInfo
[PartnerTelemetryKey("sourceVersion", AllowEmpty = true)]
[PartnerTelemetryKey("destinationVersion", AllowEmpty = true)]
[PartnerTelemetryKey("updatePeriodStartDateUtc", AllowEmpty = true)]
[PartnerTelemetryKey("updatePeriodEndDateUtc", AllowEmpty = true)]
[PartnerTelemetryKey("registeredForUpdateOnOrAfterDateUtc", AllowEmpty = true)]

|destinationVersion|[!INCLUDE[destinationVersion](../includes/include-telemetry-dimension-update-destination-version.md)]|
|registeredForUpdateOnOrAfterDateUtc|[!INCLUDE[registeredForUpdateOnOrAfterDateUtc](../includes/include-telemetry-dimension-registered-for-update-on-or-after-date.md)]|
|sourceVersion|[!INCLUDE[sourceVersion](../includes/include-telemetry-dimension-update-source-version.md)]|
|updatePeriodEndDateUtc|[!INCLUDE[updatePeriodEndDateUtc](../includes/include-telemetry-dimension-update-period-end-date.md)]|
|updatePeriodStartDateUtc|[!INCLUDE[updatePeriodStartDateUtc](../includes/include-telemetry-dimension-update-period-start-date.md)]|



PartnerDiagnosticsBlockEnvironmentUpdateWindow
[PartnerTelemetryKey("updateWindowStartTimeUtc", AllowEmpty = true)]
[PartnerTelemetryKey("updateWindowEndTimeUtc", AllowEmpty = true)]
[PartnerTelemetryKey("ignoreUpdateWindow")]

|updateWindowEndTimeUtc|[!INCLUDE[updateWindowEndDateUtc](../includes/include-telemetry-dimension-update-window-end-date.md)]|
|updateWindowStartTimeUtc|[!INCLUDE[updateWindowStartDateUtc](../includes/include-telemetry-dimension-update-window-start-date.md)]|
|ignoreUpdateWindow|[!INCLUDE[ignoreUpdateWindow](../includes/include-telemetry-dimension-ignore-update-window.md)]|


PartnerDiagnosticsBlockDestinationEnvironmentInfo
[PartnerTelemetryKey("destinationEnvironmentName")]
[PartnerTelemetryKey("destinationEnvironmentType")]
[PartnerTelemetryKey("destinationEnvironmentVersion")]

|destinationEnvironmentName|[!INCLUDE[destinationEnvironmentName](../includes/include-telemetry-dimension-destination-environment-name.md)]|
|destinationEnvironmentType|[!INCLUDE[destinationEnvironmentType](../includes/include-telemetry-dimension-destination-environment-type.md)]|
|destinationEnvironmentVersion|[!INCLUDE[destinationEnvironmentVersion](../includes/include-telemetry-dimension-destination-environment-version.md)]|


PartnerDiagnosticsBlockSourceEnvironmentInfo
[PartnerTelemetryKey("sourceEnvironmentName")]
[PartnerTelemetryKey("sourceEnvironmentType")]
[PartnerTelemetryKey("sourceEnvironmentVersion")]

|sourceEnvironmentName|[!INCLUDE[sourceEnvironmentName](../includes/include-telemetry-dimension-source-environment-name.md)]|
|sourceEnvironmentType|[!INCLUDE[sourceEnvironmentType](../includes/include-telemetry-dimension-source-environment-type.md)]|
|sourceEnvironmentVersion|[!INCLUDE[sourceEnvironmentVersion](../includes/include-telemetry-dimension-source-environment-version.md)]|



PartnerDiagnosticsBlockEnvironmentOperation
[PartnerTelemetryKey("initiatedFrom")]

|initiatedFrom|[!INCLUDE[initiatedFrom](../includes/include-telemetry-dimension-initiated-from.md)]|


PartnerDiagnosticsBlockOperationSuccessInfo
[PartnerTelemetryKey("totalTime")

|totalTime|[!INCLUDE[totalTime](../includes/include-telemetry-dimension-total-time.md)]|


PartnerDiagnosticsBlockOperationFailureInfo
[PartnerTelemetryKey("totalTime")]
[PartnerTelemetryKey("failureReason")]

|totalTime|[!INCLUDE[totalTime](../includes/include-telemetry-dimension-total-time.md)]|
|failureReason|[!INCLUDE[failureReason](../includes/include-telemetry-dimension-failure-reason.md)]|



// 
// For docs 
//


// TAC only
EnvironmentAppInstallScheduled = "LC0161";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation scheduled for environment: {this.EnvironmentInfo.EnvironmentName}");



EnvironmentAppInstallSchedulingFailed = "LC0162";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockSchedulingFailureInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation scheduling failed for environment: {this.EnvironmentInfo.EnvironmentName}");



// All install events except when installing from VSCODE
EnvironmentAppInstallStarted = "LC0163";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation started for environment: {this.EnvironmentInfo.EnvironmentName}");


EnvironmentAppInstallSucceeded = "LC0164";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockOperationSuccessInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation succeeded for environment: {this.EnvironmentInfo.EnvironmentName}");


EnvironmentAppInstallFailed = "LC0165";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockOperationFailureInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation failed for environment: {this.EnvironmentInfo.EnvironmentName}");


// TAC only - Some app lifecycle event needed this
EnvironmentAppDependencyInstallRequired = "LC0166";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
[PartnerTelemetryKey("dependencyExtensionId")]
[PartnerTelemetryKey("dependencyExtensionName")]
[PartnerTelemetryKey("dependencyExtensionPublisher")]
[PartnerTelemetryKey("dependencyExtensionScope")]
[PartnerTelemetryKey("dependencyExtensionDestinationVersion")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}', version '{this.AppOperation.ExtensionDestinationVersion}' installation/update requires automatically installing a new dependency app '{this.DependencyExtensionName}', version {this.DependencyExtensionDestinationVersion} for environment: {this.EnvironmentInfo.EnvironmentName}");





// TAC only
EnvironmentAppUpdateScheduled = "LC0167";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' update to version {this.AppOperation.ExtensionDestinationVersion} scheduled for environment: {this.EnvironmentInfo.EnvironmentName}");


EnvironmentAppUpdateSchedulingFailed = "LC0168";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockSchedulingFailureInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' update to version {this.AppOperation.ExtensionDestinationVersion} scheduling failed for environment: {this.EnvironmentInfo.EnvironmentName}");


// All operations except when installing from VSCODE
EnvironmentAppUpdateStarted = "LC0169";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' update to version {this.AppOperation.ExtensionDestinationVersion} started for environment: {this.EnvironmentInfo.EnvironmentName}");


EnvironmentAppUpdateSucceeded = "LC0170";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockOperationSuccessInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' update to version {this.AppOperation.ExtensionDestinationVersion} succeeded for environment: {this.EnvironmentInfo.EnvironmentName}");


EnvironmentAppUpdateFailed = "LC0171";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]
PartnerDiagnosticsBlockOperationFailureInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' update to version {this.AppOperation.ExtensionDestinationVersion} failed for environment: {this.EnvironmentInfo.EnvironmentName}");


// TAC only - Some app lifecycle event needed this
EnvironmentAppDependencyUpdateRequired = "LC0172";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("allowPreviewVersion")]
[PartnerTelemetryKey("allowDependencyUpdate")]

[PartnerTelemetryKey("dependencyExtensionId")]
[PartnerTelemetryKey("dependencyExtensionName")]
[PartnerTelemetryKey("dependencyExtensionPublisher")]
[PartnerTelemetryKey("dependencyExtensionScope")]
[PartnerTelemetryKey("dependencyExtensionDestinationVersion")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' install/update to version {this.AppOperation.ExtensionDestinationVersion} requires automatically updating existing dependency app '{this.DependencyExtensionName}' to version {this.DependencyExtensionDestinationVersion} for environment: {this.EnvironmentInfo.EnvironmentName}");



// TAC only
EnvironmentAppUninstallScheduled = "LC0173";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("deleteData")]
[PartnerTelemetryKey("allowDependentsUninstall")]
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' uninstall scheduled for environment: {this.EnvironmentInfo.EnvironmentName}");

EnvironmentAppUninstallSchedulingFailed = "LC0174";
PartnerDiagnosticsBlockEnvironmentInfo
PartnerDiagnosticsBlockEnvironmentAppOperation
[PartnerTelemetryKey("deleteData")]
[PartnerTelemetryKey("allowDependentsUninstall")]
PartnerDiagnosticsBlockSchedulingFailureInfo
Message => Invariant($"Environment app '{this.AppOperation.GetAppDisplayName()}' uninstall scheduling failed for environment: {this.EnvironmentInfo.EnvironmentName}");
