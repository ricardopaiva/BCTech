// KQL samples - Long Running SQL Queries

// Important: if you query telemetry from an environment on version 15.0-15.2 
// Then please see below for a sample query. The schema changed starting in 15.3 


// Long running SQL queries (RAW data)
traces
| where timestamp > ago(60d) // adjust as needed
| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used 
     or customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types
| where customDimensions.alObjectId > 0 // filter out internal server calls
| project timestamp
, usertelemetryId = case(
  // user telemetry id was introduced in the platform in version 20.0
  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id
, 'N/A'
)
, aadTenantId = customDimensions.aadTenantId
, sqlStatement = tostring(customDimensions.sqlStatement)
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, companyName = customDimensions.companyName
, extensionId = customDimensions.extensionId
, extensionPublisher = customDimensions.extensionPublisher
, extensionName = customDimensions.extensionName
, extensionVersion = customDimensions.extensionVersion
, alObjectId = customDimensions.alObjectId
, alObjectName = customDimensions.alObjectName
, alObjectType = customDimensions.alObjectType
, alStackTrace = customDimensions.alStackTrace
// use the KQL snippet parseStackTrace to get bottom of the stack trace details
, clientType = customDimensions.clientType
, executionTime = customDimensions.executionTime
, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan 
// this part of the query derives various insights from the SQL statement
| extend operationType = case(
  sqlStatement startswith "UPDATE", "UPDATE"
, sqlStatement startswith "DELETE", "DELETE"
, sqlStatement startswith "BeginTransaction", "BEGIN_TRANS"
, sqlStatement matches regex "INSERT INTO", "INSERT"
, sqlStatement startswith "SELECT", "SELECT"
, sqlStatement matches regex "IF EXISTS \\(SELECT (.*)\\) SELECT", "SELECT'"
, sqlStatement has "SELECT NEXT VALUE FOR", "SELECT_SEQUENCE_VALUE"
, sqlStatement has "SELECT @@SPID", "SELECT_SPID"
, sqlStatement matches regex "(.*)WITH", "SELECT"
, sqlStatement startswith "CREATE TABLE", "CREATE_TABLE"
, sqlStatement startswith "ALTER TABLE", "ALTER_TABLE"
, sqlStatement startswith "exec sp_rename", "RENAME_TABLE" 
, sqlStatement matches regex "(.*)DROP TABLE", "DROP_TABLE"
, sqlStatement startswith "SET LOCK_TIMEOUT", "SET_LOCK_TIMEOUT"
, sqlStatement has "sp_getapplock", "GET_APP_LOCK"
, "UNKNOWN"
)
, numberOfJoins = countof(sqlStatement, "JOIN") 
, numberOfOuterApplys = countof(sqlStatement, "OUTER APPLY") 
, extensionIdsFromJOIN = tostring( extract_all("JOIN \"SQLDATABASE\"\\.dbo\\.\"CURRENTCOMPANY\\$.+?\\$(\\S+?)\"", sqlStatement) )
| parse kind=regex sqlStatement with selectPart:string "FROM" rest:string
| extend numberOfColumnsSelected = case(
operationType == "SELECT", countof(selectPart,",") + 1
, operationType == "SELECT'", countof(selectPart,",") + 1
, 0
)
, takeLocks = sqlStatement has 'UPDLOCK'
, searchQuery = SqlStatement has 'LIKE' and SqlStatement has 'COLLATE'


// version that works on 15.0, 15.2, and 15.2 versions
// note how all the calls to custom dimensions have to use the customDimensions.['<column name>'] syntax
// which makes it cumbersome to write queries. 
// This is why we changed the schema to use camelCasing for column names from 15.3 and onwards
traces
| where timestamp > ago(60d) // adjust as needed
| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used (a new field in custom dimensions will be used)
| extend alObjectId = customDimensions.['AL Object Id']
| where alObjectId > 0 // filter out internal server calls
| extend aadTenantId = customDimensions.['AadTenantId']
       , executionTime = customDimensions.['Execution time (ms)']
       , sqlStatement = tostring( customDimensions.['SQL statement'] )
| extend alObjectName = tostring( customDimensions.['AL Object name'] )
, alObjectType = tostring( customDimensions.['AL Object type'] )
, alStackTrace = tostring( customDimensions.['AL Stack trace'] )
, clientType = tostring( customDimensions.['Client type'] )
, companyName = tostring( customDimensions.['Company name'] )
, component = customDimensions.['Component']
, componentVersion = customDimensions.['Component version']
, environmentName = tostring( customDimensions.['Environment name'] )
, environmentType = tostring( customDimensions.['Environment type'] )
, executionTimeInMS = toreal(totimespan(executionTime))/10000 //the datatype for executionTime is timespan 
// this part of the query derives various insights from the SQL statement
| extend operationType = case(
  sqlStatement startswith "UPDATE", "UPDATE"
, sqlStatement startswith "DELETE", "DELETE"
, sqlStatement startswith "BeginTransaction", "BEGIN_TRANS"
, sqlStatement matches regex "INSERT INTO", "INSERT"
, sqlStatement startswith "SELECT", "SELECT"
, sqlStatement matches regex "IF EXISTS \\(SELECT (.*)\\) SELECT", "SELECT'"
, sqlStatement has "SELECT NEXT VALUE FOR", "SELECT_SEQUENCE_VALUE"
, sqlStatement has "SELECT @@SPID", "SELECT_SPID"
, sqlStatement matches regex "(.*)WITH", "SELECT"
, sqlStatement startswith "CREATE TABLE", "CREATE_TABLE"
, sqlStatement startswith "ALTER TABLE", "ALTER_TABLE"
, sqlStatement startswith "exec sp_rename", "RENAME_TABLE" 
, sqlStatement matches regex "(.*)DROP TABLE", "DROP_TABLE"
, sqlStatement startswith "SET LOCK_TIMEOUT", "SET_LOCK_TIMEOUT"
, sqlStatement has "sp_getapplock", "GET_APP_LOCK"
, "UNKNOWN"
)
, numberOfJoins = countof(sqlStatement, "JOIN") 
, numberOfOuterApplys = countof(sqlStatement, "OUTER APPLY") 
, extensionIdsFromJOIN = tostring( extract_all("JOIN \"SQLDATABASE\"\\.dbo\\.\"CURRENTCOMPANY\\$.+?\\$(\\S+?)\"", sqlStatement) )
| parse kind=regex sqlStatement with selectPart:string "FROM" rest:string
| extend numberOfColumnsSelected = case(
operationType == "SELECT", countof(selectPart,",") + 1
, operationType == "SELECT'", countof(selectPart,",") + 1
, 0
)
, takeLocks = sqlStatement has 'UPDLOCK'
, searchQuery = SqlStatement has 'LIKE' and SqlStatement has 'COLLATE'